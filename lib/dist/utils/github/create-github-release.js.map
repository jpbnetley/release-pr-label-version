{"version":3,"file":"create-github-release.js","names":[],"sources":["../../../src/utils/github/create-github-release.ts"],"sourcesContent":["import { error, info } from '@actions/core'\nimport { Octokit } from '../../types/models/github/octokit.js'\n\nexport type CreateGitHubReleaseParam = {\n  owner: string\n  repo: string\n  tagName: string\n  releaseName: string\n  body: string\n  isDraft?: boolean\n  isPreRelease?: boolean\n  generate_release_notes?: boolean\n}\n\n/**\n * Creates a function to publish a new GitHub release using the provided Octokit instance.\n *\n * @param octokit - An authenticated Octokit instance for interacting with the GitHub API.\n * @returns A function that creates a GitHub release when called.\n *\n * @remarks\n * The returned function requires the following parameters:\n * - `tagName`: The tag name for the release (e.g., \"v1.0.0\").\n * - `releaseName`: The name/title of the release.\n * - `body`: The release notes or description.\n * - `isDraft`: Optional. Whether the release is a draft. Defaults to `false`.\n * - `isPreRelease`: Optional. Whether the release is a pre-release. Defaults to `false`.\n *\n * The function reads the repository owner and name from the environment variables\n * `GITHUB_REPOSITORY_OWNER` and `GITHUB_REPOSITORY_NAME`.\n *\n * @throws Will reject the promise if the GitHub release creation fails.\n */\nexport function createGitHubRelease(octokit: Octokit) {\n  return function release({\n    body,\n    isDraft = false,\n    isPreRelease = false,\n    owner,\n    releaseName,\n    repo,\n    tagName,\n    generate_release_notes = true\n  }: CreateGitHubReleaseParam): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        await octokit.rest.repos.createRelease({\n          owner,\n          repo,\n          tag_name: tagName,\n          name: releaseName,\n          body,\n          draft: isDraft,\n          prerelease: isPreRelease,\n          generate_release_notes,\n        })\n\n        info(`Created GitHub release: ${releaseName} (${tagName})`)\n        resolve()\n      } catch (err) {\n        error(\n          err instanceof Error ? err : `Error creating GitHub release: ${err}`\n        )\n        reject(err)\n      }\n    })\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAiCA,SAAgB,oBAAoB,SAAkB;AACpD,QAAO,SAAS,QAAQ,EACtB,MACA,UAAU,OACV,eAAe,OACf,OACA,aACA,MACA,SACA,yBAAyB,MACA,EAAiB;AAC1C,SAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC5C,OAAI;AACF,UAAM,QAAQ,KAAK,MAAM,cAAc;KACrC;KACA;KACA,UAAU;KACV,MAAM;KACN;KACA,OAAO;KACP,YAAY;KACZ;KACD;AAED,0BAAK,2BAA2B,YAAY,IAAI,QAAQ;AACxD;GACD,SAAQ,KAAK;AACZ,2BACE,eAAe,QAAQ,MAAM,kCAAkC;AAEjE,WAAO;GACR;EACF;CACF;AACF"}