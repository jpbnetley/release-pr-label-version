{"version":3,"file":"push-git.js","names":[],"sources":["../../../src/utils/git/push-git.ts"],"sourcesContent":["import { info, setFailed } from '@actions/core'\nimport { exec } from 'node:child_process'\n\nexport type GitPushParams = {\n  owner: string\n  repo: string\n  branchName: string\n  commitMessage?: string\n}\n\n/**\n * Returns an async function to push changes to a specified branch in a GitHub repository using Octokit.\n *\n * @param octokit - An authenticated Octokit instance for GitHub API requests.\n * @returns An async function that pushes changes to a branch.\n *\n * The returned function parameters:\n * @param owner - The owner of the repository.\n * @param repo - The name of the repository.\n * @param branchName - The name of the branch to push changes to.\n * @param commitMessage - (Optional) The commit SHA to update the branch reference to. Defaults to 'Update branch'.\n * @returns The response data from the GitHub API after updating the reference, or undefined if an error occurs.\n *\n * @remarks\n * The `commitMessage` parameter is used as the SHA for the updateRef call, which should be the commit SHA you want the branch to point to.\n * If an error occurs during the push, the function will call `setFailed` with an appropriate error message.\n */\nexport function gitPush(branchName: string) {\nreturn new Promise<void>((resolve, reject) => {\n  exec(`git push origin ${branchName}`, (error, stdout, stderr) => {\n    if (error) {\n      setFailed(`Failed to push changes: ${error.message}`)\n      reject(error)\n      return\n    }\n\n    info(`Successfully pushed changes to branch: ${branchName}`)\n    resolve()\n  })\n})\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAgB,QAAQ,YAAoB;AAC5C,QAAO,IAAI,SAAe,SAAS,WAAW;AAC5C,OAAK,mBAAmB,eAAe,OAAO,QAAQ,WAAW;AAC/D,OAAI,OAAO;AACT,+BAAU,2BAA2B,MAAM;AAC3C,WAAO;AACP;GACD;AAED,yBAAK,0CAA0C;AAC/C;EACD;CACF;AACA"}