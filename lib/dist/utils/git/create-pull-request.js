import { __toESM, require_core } from "../../core-Bd4l5kNc.js";

//#region src/utils/git/create-pull-request.ts
var import_core = /* @__PURE__ */ __toESM(require_core(), 1);
/**
* Creates a function to open a new pull request on a GitHub repository using the provided Octokit instance.
*
* @param octokit - An authenticated Octokit instance for interacting with the GitHub API.
* @returns An async function that creates a pull request with the specified parameters.
*
* @example
* const createPR = createPullRequest(octokit);
* await createPR('owner', 'repo', 'My PR Title', 'feature-branch', 'main', 'PR description');
*
* @throws Will call `setFailed` if the pull request creation fails.
*/
function createPullRequest(octokit) {
	return async function createPullRequest$1({ owner, repo, title, head, base = "main", body }) {
		try {
			const { data: pullRequest } = await octokit.rest.pulls.create({
				owner,
				repo,
				title,
				head,
				base,
				body,
				labels: ["release-pr-label-version"]
			});
			return pullRequest;
		} catch (error) {
			if (error instanceof Error) (0, import_core.setFailed)(`Failed to create pull request: ${error.message}`);
			else (0, import_core.setFailed)("Failed to create pull request: Unknown error");
		}
	};
}

//#endregion
export { createPullRequest };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXB1bGwtcmVxdWVzdC5qcyIsIm5hbWVzIjpbIm9jdG9raXQ6IE9jdG9raXQiLCJjcmVhdGVQdWxsUmVxdWVzdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9naXQvY3JlYXRlLXB1bGwtcmVxdWVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXRGYWlsZWQgfSBmcm9tICdAYWN0aW9ucy9jb3JlJ1xuaW1wb3J0IHsgT2N0b2tpdCB9IGZyb20gJy4uLy4uL3R5cGVzL21vZGVscy9naXRodWIvb2N0b2tpdC5qcydcblxuZXhwb3J0IHR5cGUgQ3JlYXRlUHVsbFJlcXVlc3RQYXJhbXMgPSB7XG4gIG93bmVyOiBzdHJpbmdcbiAgcmVwbzogc3RyaW5nXG4gIHRpdGxlOiBzdHJpbmdcbiAgaGVhZDogc3RyaW5nXG4gIGJhc2U6IHN0cmluZ1xuICBib2R5Pzogc3RyaW5nXG59XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0byBvcGVuIGEgbmV3IHB1bGwgcmVxdWVzdCBvbiBhIEdpdEh1YiByZXBvc2l0b3J5IHVzaW5nIHRoZSBwcm92aWRlZCBPY3Rva2l0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBvY3Rva2l0IC0gQW4gYXV0aGVudGljYXRlZCBPY3Rva2l0IGluc3RhbmNlIGZvciBpbnRlcmFjdGluZyB3aXRoIHRoZSBHaXRIdWIgQVBJLlxuICogQHJldHVybnMgQW4gYXN5bmMgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgcHVsbCByZXF1ZXN0IHdpdGggdGhlIHNwZWNpZmllZCBwYXJhbWV0ZXJzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBjcmVhdGVQUiA9IGNyZWF0ZVB1bGxSZXF1ZXN0KG9jdG9raXQpO1xuICogYXdhaXQgY3JlYXRlUFIoJ293bmVyJywgJ3JlcG8nLCAnTXkgUFIgVGl0bGUnLCAnZmVhdHVyZS1icmFuY2gnLCAnbWFpbicsICdQUiBkZXNjcmlwdGlvbicpO1xuICpcbiAqIEB0aHJvd3MgV2lsbCBjYWxsIGBzZXRGYWlsZWRgIGlmIHRoZSBwdWxsIHJlcXVlc3QgY3JlYXRpb24gZmFpbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQdWxsUmVxdWVzdChvY3Rva2l0OiBPY3Rva2l0KSB7XG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiBjcmVhdGVQdWxsUmVxdWVzdCh7XG4gICAgb3duZXIsXG4gICAgcmVwbyxcbiAgICB0aXRsZSxcbiAgICBoZWFkLFxuICAgIGJhc2UgPSAnbWFpbicsXG4gICAgYm9keSxcbiAgfTogQ3JlYXRlUHVsbFJlcXVlc3RQYXJhbXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhOiBwdWxsUmVxdWVzdCB9ID0gYXdhaXQgb2N0b2tpdC5yZXN0LnB1bGxzLmNyZWF0ZSh7XG4gICAgICAgIG93bmVyLFxuICAgICAgICByZXBvLFxuICAgICAgICB0aXRsZSxcbiAgICAgICAgaGVhZCxcbiAgICAgICAgYmFzZSxcbiAgICAgICAgYm9keSxcbiAgICAgICAgbGFiZWxzOiBbJ3JlbGVhc2UtcHItbGFiZWwtdmVyc2lvbiddLFxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHB1bGxSZXF1ZXN0XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHNldEZhaWxlZChgRmFpbGVkIHRvIGNyZWF0ZSBwdWxsIHJlcXVlc3Q6ICR7ZXJyb3IubWVzc2FnZX1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0RmFpbGVkKCdGYWlsZWQgdG8gY3JlYXRlIHB1bGwgcmVxdWVzdDogVW5rbm93biBlcnJvcicpXG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkEsU0FBZ0Isa0JBQWtCQSxTQUFrQjtBQUNsRCxRQUFPLGVBQWVDLG9CQUFrQixFQUN0QyxPQUNBLE1BQ0EsT0FDQSxNQUNBLE9BQU8sUUFDUCxNQUN3QixFQUFFO0FBQzFCLE1BQUk7R0FDRixNQUFNLEVBQUUsTUFBTSxhQUFhLEdBQUcsTUFBTSxRQUFRLEtBQUssTUFBTSxPQUFPO0lBQzVEO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLFFBQVEsQ0FBQywwQkFBMkI7R0FDckMsRUFBQztBQUVGLFVBQU87RUFDUixTQUFRLE9BQU87QUFDZCxPQUFJLGlCQUFpQixrQ0FDVCxDQUFDLCtCQUErQixFQUFFLE1BQU0sU0FBUyxDQUFDO21DQUVsRCwrQ0FBK0M7RUFFNUQ7Q0FDRjtBQUNGIn0=