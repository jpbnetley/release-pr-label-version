import { __toESM, require_core } from "../../core-Bd4l5kNc.js";

//#region src/utils/git/create-pull-request.ts
var import_core = /* @__PURE__ */ __toESM(require_core(), 1);
/**
* Creates a function to open a new pull request on a GitHub repository using the provided Octokit instance.
*
* @param octokit - An authenticated Octokit instance for interacting with the GitHub API.
* @returns An async function that creates a pull request with the specified parameters.
*
* @example
* const createPR = createPullRequest(octokit);
* await createPR('owner', 'repo', 'My PR Title', 'feature-branch', 'main', 'PR description');
*
* @throws Will call `setFailed` if the pull request creation fails.
*/
function createPullRequest(octokit) {
	return async function createPullRequest$1({ owner, repo, title, head, base = "main", body }) {
		try {
			const { data: pullRequest } = await octokit.rest.pulls.create({
				owner,
				repo,
				title,
				head,
				base,
				body,
				labels: ["release-pr-label-version"]
			});
			return pullRequest;
		} catch (error) {
			if (error instanceof Error) (0, import_core.setFailed)(`Failed to create pull request: ${error.message}`);
			else (0, import_core.setFailed)("Failed to create pull request: Unknown error");
		}
	};
}

//#endregion
export { createPullRequest };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXB1bGwtcmVxdWVzdC5qcyIsIm5hbWVzIjpbIm9jdG9raXQ6IE9jdG9raXQiLCJjcmVhdGVQdWxsUmVxdWVzdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9naXQvY3JlYXRlLXB1bGwtcmVxdWVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXRGYWlsZWQgfSBmcm9tICdAYWN0aW9ucy9jb3JlJ1xuaW1wb3J0IHsgT2N0b2tpdCB9IGZyb20gJ2xpYi90eXBlcy9tb2RlbHMvZ2l0aHViL29jdG9raXQuanMnXG5cbmV4cG9ydCB0eXBlIENyZWF0ZVB1bGxSZXF1ZXN0UGFyYW1zID0ge1xuICBvd25lcjogc3RyaW5nXG4gIHJlcG86IHN0cmluZ1xuICB0aXRsZTogc3RyaW5nXG4gIGhlYWQ6IHN0cmluZ1xuICBiYXNlOiBzdHJpbmdcbiAgYm9keT86IHN0cmluZ1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdG8gb3BlbiBhIG5ldyBwdWxsIHJlcXVlc3Qgb24gYSBHaXRIdWIgcmVwb3NpdG9yeSB1c2luZyB0aGUgcHJvdmlkZWQgT2N0b2tpdCBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gb2N0b2tpdCAtIEFuIGF1dGhlbnRpY2F0ZWQgT2N0b2tpdCBpbnN0YW5jZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgR2l0SHViIEFQSS5cbiAqIEByZXR1cm5zIEFuIGFzeW5jIGZ1bmN0aW9uIHRoYXQgY3JlYXRlcyBhIHB1bGwgcmVxdWVzdCB3aXRoIHRoZSBzcGVjaWZpZWQgcGFyYW1ldGVycy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgY3JlYXRlUFIgPSBjcmVhdGVQdWxsUmVxdWVzdChvY3Rva2l0KTtcbiAqIGF3YWl0IGNyZWF0ZVBSKCdvd25lcicsICdyZXBvJywgJ015IFBSIFRpdGxlJywgJ2ZlYXR1cmUtYnJhbmNoJywgJ21haW4nLCAnUFIgZGVzY3JpcHRpb24nKTtcbiAqXG4gKiBAdGhyb3dzIFdpbGwgY2FsbCBgc2V0RmFpbGVkYCBpZiB0aGUgcHVsbCByZXF1ZXN0IGNyZWF0aW9uIGZhaWxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHVsbFJlcXVlc3Qob2N0b2tpdDogT2N0b2tpdCkge1xuICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gY3JlYXRlUHVsbFJlcXVlc3Qoe1xuICAgIG93bmVyLFxuICAgIHJlcG8sXG4gICAgdGl0bGUsXG4gICAgaGVhZCxcbiAgICBiYXNlID0gJ21haW4nLFxuICAgIGJvZHksXG4gIH06IENyZWF0ZVB1bGxSZXF1ZXN0UGFyYW1zKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogcHVsbFJlcXVlc3QgfSA9IGF3YWl0IG9jdG9raXQucmVzdC5wdWxscy5jcmVhdGUoe1xuICAgICAgICBvd25lcixcbiAgICAgICAgcmVwbyxcbiAgICAgICAgdGl0bGUsXG4gICAgICAgIGhlYWQsXG4gICAgICAgIGJhc2UsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGxhYmVsczogWydyZWxlYXNlLXByLWxhYmVsLXZlcnNpb24nXSxcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiBwdWxsUmVxdWVzdFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICBzZXRGYWlsZWQoYEZhaWxlZCB0byBjcmVhdGUgcHVsbCByZXF1ZXN0OiAke2Vycm9yLm1lc3NhZ2V9YClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEZhaWxlZCgnRmFpbGVkIHRvIGNyZWF0ZSBwdWxsIHJlcXVlc3Q6IFVua25vd24gZXJyb3InKVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBdUJBLFNBQWdCLGtCQUFrQkEsU0FBa0I7QUFDbEQsUUFBTyxlQUFlQyxvQkFBa0IsRUFDdEMsT0FDQSxNQUNBLE9BQ0EsTUFDQSxPQUFPLFFBQ1AsTUFDd0IsRUFBRTtBQUMxQixNQUFJO0dBQ0YsTUFBTSxFQUFFLE1BQU0sYUFBYSxHQUFHLE1BQU0sUUFBUSxLQUFLLE1BQU0sT0FBTztJQUM1RDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQSxRQUFRLENBQUMsMEJBQTJCO0dBQ3JDLEVBQUM7QUFFRixVQUFPO0VBQ1IsU0FBUSxPQUFPO0FBQ2QsT0FBSSxpQkFBaUIsa0NBQ1QsQ0FBQywrQkFBK0IsRUFBRSxNQUFNLFNBQVMsQ0FBQzttQ0FFbEQsK0NBQStDO0VBRTVEO0NBQ0Y7QUFDRiJ9