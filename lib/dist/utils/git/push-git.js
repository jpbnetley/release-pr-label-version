import { __toESM, require_core } from "../../core-Bd4l5kNc.js";

//#region src/utils/git/push-git.ts
var import_core = /* @__PURE__ */ __toESM(require_core(), 1);
/**
* Returns an async function to push changes to a specified branch in a GitHub repository using Octokit.
*
* @param octokit - An authenticated Octokit instance for GitHub API requests.
* @returns An async function that pushes changes to a branch.
*
* The returned function parameters:
* @param owner - The owner of the repository.
* @param repo - The name of the repository.
* @param branchName - The name of the branch to push changes to.
* @param commitMessage - (Optional) The commit SHA to update the branch reference to. Defaults to 'Update branch'.
* @returns The response data from the GitHub API after updating the reference, or undefined if an error occurs.
*
* @remarks
* The `commitMessage` parameter is used as the SHA for the updateRef call, which should be the commit SHA you want the branch to point to.
* If an error occurs during the push, the function will call `setFailed` with an appropriate error message.
*/
function gitPush(octokit) {
	return async function pushGit({ owner, repo, branchName, commitMessage = "Update branch" }) {
		try {
			const { data: pushData } = await octokit.rest.git.updateRef({
				owner,
				repo,
				ref: `heads/${branchName}`,
				sha: commitMessage,
				force: true
			});
			return pushData;
		} catch (error) {
			if (error instanceof Error) (0, import_core.setFailed)(`Failed to push git changes: ${error.message}`);
			else (0, import_core.setFailed)("Failed to push git changes: Unknown error");
		}
	};
}

//#endregion
export { gitPush };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC1naXQuanMiLCJuYW1lcyI6WyJvY3Rva2l0OiBPY3Rva2l0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2dpdC9wdXNoLWdpdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXRGYWlsZWQgfSBmcm9tICdAYWN0aW9ucy9jb3JlJ1xuaW1wb3J0IHsgT2N0b2tpdCB9IGZyb20gJ2xpYi90eXBlcy9tb2RlbHMvZ2l0aHViL29jdG9raXQuanMnXG5cbmV4cG9ydCB0eXBlIEdpdFB1c2hQYXJhbXMgPSB7XG4gIG93bmVyOiBzdHJpbmdcbiAgcmVwbzogc3RyaW5nXG4gIGJyYW5jaE5hbWU6IHN0cmluZ1xuICBjb21taXRNZXNzYWdlPzogc3RyaW5nXG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhc3luYyBmdW5jdGlvbiB0byBwdXNoIGNoYW5nZXMgdG8gYSBzcGVjaWZpZWQgYnJhbmNoIGluIGEgR2l0SHViIHJlcG9zaXRvcnkgdXNpbmcgT2N0b2tpdC5cbiAqXG4gKiBAcGFyYW0gb2N0b2tpdCAtIEFuIGF1dGhlbnRpY2F0ZWQgT2N0b2tpdCBpbnN0YW5jZSBmb3IgR2l0SHViIEFQSSByZXF1ZXN0cy5cbiAqIEByZXR1cm5zIEFuIGFzeW5jIGZ1bmN0aW9uIHRoYXQgcHVzaGVzIGNoYW5nZXMgdG8gYSBicmFuY2guXG4gKlxuICogVGhlIHJldHVybmVkIGZ1bmN0aW9uIHBhcmFtZXRlcnM6XG4gKiBAcGFyYW0gb3duZXIgLSBUaGUgb3duZXIgb2YgdGhlIHJlcG9zaXRvcnkuXG4gKiBAcGFyYW0gcmVwbyAtIFRoZSBuYW1lIG9mIHRoZSByZXBvc2l0b3J5LlxuICogQHBhcmFtIGJyYW5jaE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgYnJhbmNoIHRvIHB1c2ggY2hhbmdlcyB0by5cbiAqIEBwYXJhbSBjb21taXRNZXNzYWdlIC0gKE9wdGlvbmFsKSBUaGUgY29tbWl0IFNIQSB0byB1cGRhdGUgdGhlIGJyYW5jaCByZWZlcmVuY2UgdG8uIERlZmF1bHRzIHRvICdVcGRhdGUgYnJhbmNoJy5cbiAqIEByZXR1cm5zIFRoZSByZXNwb25zZSBkYXRhIGZyb20gdGhlIEdpdEh1YiBBUEkgYWZ0ZXIgdXBkYXRpbmcgdGhlIHJlZmVyZW5jZSwgb3IgdW5kZWZpbmVkIGlmIGFuIGVycm9yIG9jY3Vycy5cbiAqXG4gKiBAcmVtYXJrc1xuICogVGhlIGBjb21taXRNZXNzYWdlYCBwYXJhbWV0ZXIgaXMgdXNlZCBhcyB0aGUgU0hBIGZvciB0aGUgdXBkYXRlUmVmIGNhbGwsIHdoaWNoIHNob3VsZCBiZSB0aGUgY29tbWl0IFNIQSB5b3Ugd2FudCB0aGUgYnJhbmNoIHRvIHBvaW50IHRvLlxuICogSWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZyB0aGUgcHVzaCwgdGhlIGZ1bmN0aW9uIHdpbGwgY2FsbCBgc2V0RmFpbGVkYCB3aXRoIGFuIGFwcHJvcHJpYXRlIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnaXRQdXNoKG9jdG9raXQ6IE9jdG9raXQpIHtcbiAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIHB1c2hHaXQoe1xuICAgIG93bmVyLFxuICAgIHJlcG8sXG4gICAgYnJhbmNoTmFtZSxcbiAgICBjb21taXRNZXNzYWdlID0gJ1VwZGF0ZSBicmFuY2gnLFxuICB9OiBHaXRQdXNoUGFyYW1zKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFB1c2ggdGhlIGNoYW5nZXMgdG8gdGhlIHNwZWNpZmllZCBicmFuY2hcbiAgICAgIGNvbnN0IHsgZGF0YTogcHVzaERhdGEgfSA9IGF3YWl0IG9jdG9raXQucmVzdC5naXQudXBkYXRlUmVmKHtcbiAgICAgICAgb3duZXIsXG4gICAgICAgIHJlcG8sXG4gICAgICAgIHJlZjogYGhlYWRzLyR7YnJhbmNoTmFtZX1gLFxuICAgICAgICBzaGE6IGNvbW1pdE1lc3NhZ2UsIC8vIFRoaXMgc2hvdWxkIGJlIHRoZSBTSEEgb2YgdGhlIGNvbW1pdCB5b3Ugd2FudCB0byBwdXNoXG4gICAgICAgIGZvcmNlOiB0cnVlLCAvLyBVc2UgZm9yY2UgaWYgbmVjZXNzYXJ5XG4gICAgICB9KVxuXG4gICAgICByZXR1cm4gcHVzaERhdGFcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgc2V0RmFpbGVkKGBGYWlsZWQgdG8gcHVzaCBnaXQgY2hhbmdlczogJHtlcnJvci5tZXNzYWdlfWApXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRGYWlsZWQoJ0ZhaWxlZCB0byBwdXNoIGdpdCBjaGFuZ2VzOiBVbmtub3duIGVycm9yJylcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBLFNBQWdCLFFBQVFBLFNBQWtCO0FBQ3hDLFFBQU8sZUFBZSxRQUFRLEVBQzVCLE9BQ0EsTUFDQSxZQUNBLGdCQUFnQixpQkFDRixFQUFFO0FBQ2hCLE1BQUk7R0FFRixNQUFNLEVBQUUsTUFBTSxVQUFVLEdBQUcsTUFBTSxRQUFRLEtBQUssSUFBSSxVQUFVO0lBQzFEO0lBQ0E7SUFDQSxLQUFLLENBQUMsTUFBTSxFQUFFLFlBQVk7SUFDMUIsS0FBSztJQUNMLE9BQU87R0FDUixFQUFDO0FBRUYsVUFBTztFQUNSLFNBQVEsT0FBTztBQUNkLE9BQUksaUJBQWlCLGtDQUNULENBQUMsNEJBQTRCLEVBQUUsTUFBTSxTQUFTLENBQUM7bUNBRS9DLDRDQUE0QztFQUV6RDtDQUNGO0FBQ0YifQ==